#!/usr/bin/env bash

# update_by_dir_start

new_from_next_context_hook_tryout(){
  new_from next-context-hook-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_next_i18next_tryout(){
  new_from next-i18next-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_dynamic_routing_tryout(){
  new_from nextjs-dynamic-routing-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_express_tryout(){
  new_from nextjs-express-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_firebase_ssr_tryout(){
  new_from nextjs-firebase-ssr-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_google_analytics_tryout(){
  new_from nextjs-google-analytics-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_locale_subpath_tryout(){
  new_from nextjs-locale-subpath-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_select2_tryout(){
  new_from nextjs-select2-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_sentry_tryout(){
  new_from nextjs-sentry-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_nextjs_tryout(){
  new_from nextjs-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_next_rbx_tryout(){
  new_from next-rbx-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_next_react_router_tryout(){
  new_from next-react-router-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_next_router_tryout(){
  new_from next-router-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_next_routing_tryout(){
  new_from next-routing-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_react_next_tryout(){
  new_from react-next-tryout
  pipenv run python3 main.py
  ./run.sh
}

# update_by_dir_end



update_shortcut(){
  cp .env /tmp/.env

python3 << END
import os,sys
import subprocess
import shlex
import re
from pprint import pprint

new_command_template='''
new_from_##PROJ_NAME##(){
  new_from ##PROJ_DIR_NAME##
  pipenv run python3 main.py
  ./run.sh
}
'''

def simple_replace(x):
  output = re.sub( '##PROJ_NAME##', x.replace('-','_'), new_command_template,
    flags=re.MULTILINE)

  output = re.sub( '##PROJ_DIR_NAME##', x, output,
    flags=re.MULTILINE)

  return output

dirs = subprocess.check_output(shlex.split('ls -1')).decode('utf-8').split('\n')
tryout_dirs = list(filter(lambda x: x.find('-tryout') > 0, dirs))

new_commands_content = map( lambda x: simple_replace(x), tryout_dirs)



new_commands_string='\n'.join(
  ['# update_by_dir_start']+list(new_commands_content)+['# update_by_dir_end']
  )

temp = ''
with open('/tmp/.env','r') as fi:
  temp = ''.join(fi.readlines())
  temp = re.sub(r'# update_by_dir_start.+?# update_by_dir_end',
    new_commands_string,
    temp, count=1,flags=re.MULTILINE|re.DOTALL)

with open('/tmp/.env','w') as fo:
  fo.writelines(temp)

END

  cp /tmp/.env .env

}

new_from(){
  set -x

  rm -rf * &
  rm -rf .* &
  wait

  TEST=`echo $PWD|rev |cut -d'/' -f1 |rev`
  # git branch -D test/$TEST
  # git checkout -b test/$TEST

  rsync -avzh --exclude node_modules --exclude .cache --exclude public ../$1/ .

}

helloworld(){
  echo 'helloworld'
}

PROJ_ROOT=$PWD


export PATH=$PATH:node_modules/.bin
